# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: contact.sql
from typing import AsyncIterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from db import models


CREATE_CONTACT = """-- name: create_contact \\:one
INSERT INTO contact (event_id, email, phone_number)
VALUES (:p1, :p2, :p3)
RETURNING id, uuid, created_at, event_id, email, phone_number, address
"""


GET_CONTACT = """-- name: get_contact \\:one
SELECT id, uuid, created_at, event_id, email, phone_number, address
FROM contact
WHERE id = :p1
LIMIT 1
"""


LIST_CONTACTS = """-- name: list_contacts \\:many
SELECT id, uuid, created_at, event_id, email, phone_number, address
FROM contact
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_contact(self, *, event_id: int, email: str, phone_number: str) -> Optional[models.Contact]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_CONTACT), {"p1": event_id, "p2": email, "p3": phone_number})).first()
        if row is None:
            return None
        return models.Contact(
            id=row[0],
            uuid=row[1],
            created_at=row[2],
            event_id=row[3],
            email=row[4],
            phone_number=row[5],
            address=row[6],
        )

    async def get_contact(self, *, id: int) -> Optional[models.Contact]:
        row = (await self._conn.execute(sqlalchemy.text(GET_CONTACT), {"p1": id})).first()
        if row is None:
            return None
        return models.Contact(
            id=row[0],
            uuid=row[1],
            created_at=row[2],
            event_id=row[3],
            email=row[4],
            phone_number=row[5],
            address=row[6],
        )

    async def list_contacts(self) -> AsyncIterator[models.Contact]:
        result = await self._conn.stream(sqlalchemy.text(LIST_CONTACTS))
        async for row in result:
            yield models.Contact(
                id=row[0],
                uuid=row[1],
                created_at=row[2],
                event_id=row[3],
                email=row[4],
                phone_number=row[5],
                address=row[6],
            )
